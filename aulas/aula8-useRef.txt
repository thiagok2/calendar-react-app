https://blog.logrocket.com/usestate-vs-useref/

1.Exemplos
  a) Não executar o rerender a cada mudança
  import { useState, useRef } from "react";
  import "./styles.css";
  const AppDemo11 = () => {
    const [value, setValue] = useState("");
    const valueRef = useRef();
    console.log("render");
    const handleClick = () => {
      console.log(valueRef);
      setValue(valueRef.current.value);
    };
    return (
      <div className="App">
        <h4>Value: {value}</h4>
        <input ref={valueRef} />
        <button onClick={handleClick}>click</button>
      </div>
    );
  };

  O rerender será chamado apenas após clicar no botão


  b - Acessar elementos do DOM - Exemplo focus
  import { useEffect, useRef } from "react";
  import "./styles.css";
  const AppDemo12 = () => {
    const inputRef = useRef();
    console.log("render");
    useEffect(() => {
      console.log("useEffect");
      inputRef.current.focus();
    }, []);
    return (
      <div className="App">
        <input ref={inputRef} placeholder="input" />
      </div>
    );
  };

  c - Pega valor anterior
    import { useEffect, useState, useRef } from "react";
    import "./styles.css";
    const AppDemo13 = () => {
      console.log("render");
      const [count, setCount] = useState(0);
      // Get the previous value (was passed into hook on last render)
      const ref = useRef();
      // Store current value in ref
      useEffect(() => {
        console.log("useEffect");
        ref.current = count;
      }, [count]); // Only re-run if value changes
      return (
        <div className="App">
          <h1>
            Now: {count}, before: {ref.current}
          </h1>
          <button onClick={() => setCount(count + 1)}>Increment</button>
        </div>
      );
    };

  obs.: 
    It’s important to note that all refs need to get updated 
    either inside a useEffect callback or inside handlers. The same applies to useState, too.
